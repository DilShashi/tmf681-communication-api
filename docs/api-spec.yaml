openapi: 3.0.3
info:
  title: Communication Management API
  description: TM Forum Communication Management API v4.0.0 implementation
  version: 4.0.0
  contact:
    name: API Support
    email: support@tmforum.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8080/tmf-api/communicationManagement/v4
    description: Development server
tags:
  - name: CommunicationMessage
    description: Operations on Communication Messages
  - name: Notification
    description: Event notification operations
  - name: Hub
    description: Listener registration operations
paths:
  /communicationMessage:
    get:
      tags: [CommunicationMessage]
      summary: List communication messages
      description: Retrieve a list of communication messages with optional filtering
      parameters:
        - $ref: '#/components/parameters/stateFilter'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommunicationMessage'
    post:
      tags: [CommunicationMessage]
      summary: Create communication message
      description: Create a new communication message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunicationMessage'
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunicationMessage'
  /communicationMessage/{id}:
    get:
      tags: [CommunicationMessage]
      summary: Get communication message
      description: Retrieve a specific communication message by ID
      parameters:
        - $ref: '#/components/parameters/messageId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunicationMessage'
    patch:
      tags: [CommunicationMessage]
      summary: Update communication message
      description: Partially update a communication message
      parameters:
        - $ref: '#/components/parameters/messageId'
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/CommunicationMessage'
      responses:
        '200':
          description: Message updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunicationMessage'
    delete:
      tags: [CommunicationMessage]
      summary: Delete communication message
      description: Delete a communication message
      parameters:
        - $ref: '#/components/parameters/messageId'
      responses:
        '204':
          description: Message deleted
  /notification/state-change:
    post:
      tags: [Notification]
      summary: Publish state change event
      description: Publish a communication message state change event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateChangeEvent'
      responses:
        '201':
          description: Event published
  /hub:
    post:
      tags: [Hub]
      summary: Register listener
      description: Register a new event listener
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hub'
      responses:
        '201':
          description: Listener registered
components:
  parameters:
    messageId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: ID of the communication message
    stateFilter:
      name: state
      in: query
      schema:
        type: string
        enum: [initial, inProgress, completed, cancelled, failed]
      description: Filter by message state
  schemas:
    CommunicationMessage:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
        href:
          type: string
          format: uri
          description: Hypertext reference
        content:
          type: string
          description: Message content
        messageType:
          type: string
          enum: [SMS, Email, MobileAppPush]
          description: Message type
        state:
          type: string
          enum: [initial, inProgress, completed, cancelled, failed]
          description: Message state
        # Additional properties omitted for brevity
      required:
        - content
        - messageType
        - receiver
        - sender
    StateChangeEvent:
      type: object
      properties:
        eventType:
          type: string
          default: CommunicationMessageStateChangeEvent
        communicationMessage:
          $ref: '#/components/schemas/CommunicationMessage'
        state:
          type: string
          enum: [initial, inProgress, completed, cancelled, failed]
      required:
        - communicationMessage
        - state
    Hub:
      type: object
      properties:
        callback:
          type: string
          format: uri
          description: Callback URL for notifications
        query:
          type: string
          description: Event filter query
      required:
        - callback